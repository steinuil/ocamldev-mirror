# 1 "xlib/xpm.mll"
 

(***********************************************************************)
(*                                                                     *)
(*                             xlib                                    *)
(*                                                                     *)
(*       Fabrice Le Fessant, projet Para/SOR, INRIA Rocquencourt       *)
(*                                                                     *)
(*  Copyright 1999 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

  open Xtypes
  open Zpixmap
    
  exception BadFile of string * int
(* To buffer string literals *)
  
  let initial_string_buffer = String.create 256
  let string_buff = ref initial_string_buffer
  let string_index = ref 0
  let string_start_pos = ref 0
  
  let reset_string_buffer () =
    string_buff := initial_string_buffer;
    string_index := 0
  
  let store_string_char c =
    if !string_index >= String.length (!string_buff) then begin
        let new_buff = String.create (String.length (!string_buff) * 2) in
        String.blit (!string_buff) 0 new_buff 0 (String.length (!string_buff));
        string_buff := new_buff
      end;
    String.unsafe_set (!string_buff) (!string_index) c;
    incr string_index
  
  let get_stored_string () =
    let s = String.sub (!string_buff) 0 (!string_index) in
    string_buff := initial_string_buffer;
    s
    
  let code = ref ""
  let read = ref 0
  
  let width = ref 0
  let height = ref 0
  let hot_x = ref 0
  let hot_y = ref 0
  
  let hexcode lexbuf i = 
    let c = Char.lowercase (Lexing.lexeme_char lexbuf i) in
    if c>= '0' && c <='9' then (Char.code c) - (Char.code '0')
    else
    if c>= 'a' && c <= 'f' then
      Char.code c - Char.code 'a' + 10
    else
      raise (BadFile ("hexcode",Lexing.lexeme_start lexbuf))


# 63 "xlib/xpm.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\254\255\253\255\255\255\001\000\002\000\252\255\000\000\
    \005\000\015\000\025\000\035\000\004\000\003\000\000\000\059\000\
    \001\000\006\000\007\000\000\000\000\000\085\000\250\255\021\001\
    \096\001\171\001\251\255\246\001\065\002\140\002\215\002\034\003\
    \109\003\184\003\003\004\078\004\153\004\228\004\047\005\122\005\
    \197\005\053\000\249\255\248\255\002\000\003\000\000\000\000\000\
    \001\000\003\000\000\000\000\000\000\000\004\000\001\000\002\000\
    \004\000\000\000\006\000\003\000\002\000\005\000\009\000\083\000\
    \004\000\005\000\008\000\009\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \255\255\001\000\003\000\002\000\255\255\255\255\002\000\255\255\
    \002\000\255\255\255\255\001\000\255\255\255\255\255\255\005\000\
    \003\000\003\000\255\255\003\000\003\000\002\000\255\255\255\255\
    \255\255\255\255\255\255\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\007\000\007\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \003\000\003\000\255\255\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\002\000\006\000\000\000\255\255\
    \006\000\255\255\255\255\255\255\001\000\002\000\255\255\002\000\
    \255\255\003\000\001\000\255\255\255\255\022\000\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\043\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\006\000\
    \255\255\255\255\067\000\001\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \019\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\000\000\003\000\003\000\003\000\003\000\003\000\019\000\
    \001\000\002\000\001\000\001\000\003\000\014\000\003\000\003\000\
    \000\000\007\000\010\000\000\000\000\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\003\000\026\000\026\000\
    \053\000\026\000\050\000\020\000\044\000\056\000\061\000\058\000\
    \051\000\060\000\016\000\047\000\054\000\057\000\059\000\052\000\
    \055\000\001\000\000\000\000\000\026\000\026\000\006\000\002\000\
    \023\000\062\000\046\000\048\000\049\000\066\000\000\000\000\000\
    \000\000\000\000\064\000\065\000\000\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\000\000\
    \000\000\000\000\000\000\000\000\045\000\000\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\025\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \022\000\000\000\000\000\000\000\024\000\000\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\025\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\001\000\002\000\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\
    \000\000\000\000\000\000\002\000\000\000\255\255\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\000\000\000\000\000\000\000\000\024\000\
    \000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\027\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\000\000\000\000\
    \000\000\000\000\024\000\000\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\027\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\028\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\000\000\000\000\000\000\000\000\024\000\000\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\028\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\024\000\024\000\024\000\024\000\029\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\000\000\000\000\000\000\000\000\
    \024\000\000\000\024\000\024\000\024\000\024\000\029\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\000\000\
    \000\000\000\000\000\000\024\000\000\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\020\000\255\255\255\255\255\255\255\255\008\000\008\000\
    \018\000\008\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \020\000\255\255\000\000\004\000\005\000\008\000\012\000\018\000\
    \017\000\018\000\007\000\016\000\044\000\013\000\064\000\014\000\
    \255\255\005\000\008\000\255\255\255\255\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\015\000\021\000\021\000\
    \048\000\021\000\049\000\019\000\041\000\047\000\060\000\057\000\
    \050\000\046\000\015\000\045\000\053\000\056\000\058\000\051\000\
    \054\000\062\000\255\255\255\255\052\000\021\000\055\000\059\000\
    \021\000\061\000\045\000\045\000\045\000\065\000\255\255\255\255\
    \255\255\255\255\063\000\063\000\255\255\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\255\255\
    \255\255\255\255\255\255\255\255\041\000\255\255\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \041\000\255\255\255\255\255\255\021\000\255\255\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \063\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\004\000\005\000\013\000\012\000\008\000\017\000\018\000\
    \066\000\067\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\041\000\255\255\255\255\
    \255\255\255\255\255\255\015\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\255\255\
    \255\255\255\255\255\255\063\000\255\255\021\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\255\255\255\255\255\255\255\255\024\000\
    \255\255\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\255\255\255\255\
    \255\255\255\255\025\000\255\255\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\255\255\255\255\255\255\255\255\027\000\255\255\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\255\255\255\255\255\255\255\255\
    \028\000\255\255\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\255\255\
    \255\255\255\255\255\255\029\000\255\255\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\255\255\255\255\255\255\255\255\255\255\255\255\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec xpm_line lexbuf =
    __ocaml_lex_xpm_line_rec lexbuf 0
and __ocaml_lex_xpm_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 66 "xlib/xpm.mll"
    ( 
    reset_string_buffer();
    let string_start = Lexing.lexeme_start lexbuf in
    string_start_pos := string_start;
    string lexbuf;
    lexbuf.Lexing.lex_start_pos <-
      string_start - lexbuf.Lexing.lex_abs_pos;
    get_stored_string() )
# 559 "xlib/xpm.ml"

  | 1 ->
# 74 "xlib/xpm.mll"
        ( raise (BadFile ("",Lexing.lexeme_start lexbuf)))
# 564 "xlib/xpm.ml"

  | 2 ->
# 75 "xlib/xpm.mll"
      ( xpm_line lexbuf )
# 569 "xlib/xpm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_xpm_line_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 4
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 79 "xlib/xpm.mll"
    ( () )
# 580 "xlib/xpm.ml"

  | 1 ->
# 81 "xlib/xpm.mll"
      ( raise (BadFile ("",Lexing.lexeme_start lexbuf))    )
# 585 "xlib/xpm.ml"

  | 2 ->
# 83 "xlib/xpm.mll"
      ( store_string_char(Lexing.lexeme_char lexbuf 0);
      string lexbuf )
# 591 "xlib/xpm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and first_line lexbuf =
    __ocaml_lex_first_line_rec lexbuf 5
and __ocaml_lex_first_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 87 "xlib/xpm.mll"
         ( 
    let dx = nombre lexbuf in
    let dy = nombre lexbuf in
    let colors = nombre lexbuf in
    let nchars = nombre lexbuf in
    ending_string lexbuf;
    (dx,dy,colors,nchars)
  )
# 609 "xlib/xpm.ml"

  | 1 ->
# 95 "xlib/xpm.mll"
         ( comment lexbuf; first_line lexbuf )
# 614 "xlib/xpm.ml"

  | 2 ->
# 96 "xlib/xpm.mll"
        ( raise (BadFile ("",Lexing.lexeme_start lexbuf)) )
# 619 "xlib/xpm.ml"

  | 3 ->
# 97 "xlib/xpm.mll"
      ( first_line lexbuf )
# 624 "xlib/xpm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_first_line_rec lexbuf __ocaml_lex_state

and nombre lexbuf =
    __ocaml_lex_nombre_rec lexbuf 8
and __ocaml_lex_nombre_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 100 "xlib/xpm.mll"
                                     ( nombre lexbuf )
# 635 "xlib/xpm.ml"

  | 1 ->
# 101 "xlib/xpm.mll"
                    ( int_of_string(Lexing.lexeme lexbuf) )
# 640 "xlib/xpm.ml"

  | 2 ->
# 102 "xlib/xpm.mll"
                        ( int_of_string(Lexing.lexeme lexbuf) )
# 645 "xlib/xpm.ml"

  | 3 ->
# 103 "xlib/xpm.mll"
      ( raise (BadFile ("nombre",Lexing.lexeme_start lexbuf)) )
# 650 "xlib/xpm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_nombre_rec lexbuf __ocaml_lex_state

and ending_string lexbuf =
    __ocaml_lex_ending_string_rec lexbuf 12
and __ocaml_lex_ending_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 106 "xlib/xpm.mll"
         ( () )
# 661 "xlib/xpm.ml"

  | 1 ->
# 107 "xlib/xpm.mll"
      ( ending_string lexbuf )
# 666 "xlib/xpm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_ending_string_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 13
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 110 "xlib/xpm.mll"
         ( () )
# 677 "xlib/xpm.ml"

  | 1 ->
# 111 "xlib/xpm.mll"
        ( raise (BadFile ("",Lexing.lexeme_start lexbuf)) )
# 682 "xlib/xpm.ml"

  | 2 ->
# 112 "xlib/xpm.mll"
      ( comment lexbuf )
# 687 "xlib/xpm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and color_def lexbuf =
    __ocaml_lex_color_def_rec lexbuf 15
and __ocaml_lex_color_def_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 115 "xlib/xpm.mll"
         ( read_chars lexbuf; read_c lexbuf; 
    let color = read_color lexbuf in ending_string lexbuf;
    color )
# 700 "xlib/xpm.ml"

  | 1 ->
# 118 "xlib/xpm.mll"
         ( comment lexbuf; color_def lexbuf )
# 705 "xlib/xpm.ml"

  | 2 ->
# 119 "xlib/xpm.mll"
      ( color_def lexbuf )
# 710 "xlib/xpm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_color_def_rec lexbuf __ocaml_lex_state

and read_chars lexbuf =
    __ocaml_lex_read_chars_rec lexbuf 17
and __ocaml_lex_read_chars_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 122 "xlib/xpm.mll"
             ( 
    !code.[String.length !code - !read] <- Lexing.lexeme_char lexbuf 0;
    decr read;
    if !read > 0 then read_chars lexbuf
  )
# 725 "xlib/xpm.ml"

  | 1 ->
# 127 "xlib/xpm.mll"
      ( raise (BadFile ("chars",Lexing.lexeme_start lexbuf)) )
# 730 "xlib/xpm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_chars_rec lexbuf __ocaml_lex_state

and read_c lexbuf =
    __ocaml_lex_read_c_rec lexbuf 18
and __ocaml_lex_read_c_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 130 "xlib/xpm.mll"
                                  ( () )
# 741 "xlib/xpm.ml"

  | 1 ->
# 131 "xlib/xpm.mll"
             ( read_c lexbuf )
# 746 "xlib/xpm.ml"

  | 2 ->
# 132 "xlib/xpm.mll"
      ( raise (BadFile (" c ",Lexing.lexeme_start lexbuf)) )
# 751 "xlib/xpm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_c_rec lexbuf __ocaml_lex_state

and read_color lexbuf =
    __ocaml_lex_read_color_rec lexbuf 21
and __ocaml_lex_read_color_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 135 "xlib/xpm.mll"
                                                        ( 
    let hex pos = hexcode lexbuf pos * 16 + hexcode lexbuf (pos+1) in
    let r = hex 1 * 256 + hex 3 in
    let g = hex 5 * 256 + hex 7 in
    let b = hex 9 * 256 + hex 11 in
    RGB(r,g,b)    
  )
# 768 "xlib/xpm.ml"

  | 1 ->
# 142 "xlib/xpm.mll"
                                  ( 
    let hex pos = hexcode lexbuf pos * 16 + hexcode lexbuf (pos+1) in
    let r = (hex 1) * 256  in
    let g = (hex 3) * 256  in
    let b = (hex 5) * 256 in
    RGB(r,g,b)    
  )
# 779 "xlib/xpm.ml"

  | 2 ->
# 150 "xlib/xpm.mll"
                                             ( NoColor )
# 784 "xlib/xpm.ml"

  | 3 ->
# 151 "xlib/xpm.mll"
                                     ( Color(Lexing.lexeme lexbuf) )
# 789 "xlib/xpm.ml"

  | 4 ->
# 152 "xlib/xpm.mll"
                                      ( read_color lexbuf )
# 794 "xlib/xpm.ml"

  | 5 ->
# 153 "xlib/xpm.mll"
      ( raise (BadFile ("color",Lexing.lexeme_start lexbuf)) )
# 799 "xlib/xpm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_color_rec lexbuf __ocaml_lex_state

and xbm_file lexbuf =
    __ocaml_lex_xbm_file_rec lexbuf 41
and __ocaml_lex_xbm_file_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 156 "xlib/xpm.mll"
         ( comment lexbuf; xbm_file lexbuf )
# 810 "xlib/xpm.ml"

  | 1 ->
# 157 "xlib/xpm.mll"
             ( width := nombre lexbuf;
      xbm_file lexbuf )
# 816 "xlib/xpm.ml"

  | 2 ->
# 159 "xlib/xpm.mll"
              ( height := nombre lexbuf;
      xbm_file lexbuf )
# 822 "xlib/xpm.ml"

  | 3 ->
# 161 "xlib/xpm.mll"
             ( hot_x := nombre lexbuf;
      xbm_file lexbuf )
# 828 "xlib/xpm.ml"

  | 4 ->
# 163 "xlib/xpm.mll"
             ( hot_y := nombre lexbuf;
      xbm_file lexbuf )
# 834 "xlib/xpm.ml"

  | 5 ->
# 165 "xlib/xpm.mll"
        ( 
      let len = (max (!width / 8) 1) * !height  in
      code := String.create len;
      read := len;
      read_bits lexbuf
    )
# 844 "xlib/xpm.ml"

  | 6 ->
# 171 "xlib/xpm.mll"
        ( raise (BadFile ("looking for {",Lexing.lexeme_start lexbuf)) )
# 849 "xlib/xpm.ml"

  | 7 ->
# 172 "xlib/xpm.mll"
      ( xbm_file lexbuf )
# 854 "xlib/xpm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_xbm_file_rec lexbuf __ocaml_lex_state

and read_bits lexbuf =
    __ocaml_lex_read_bits_rec lexbuf 63
and __ocaml_lex_read_bits_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 175 "xlib/xpm.mll"
         ( comment lexbuf; xbm_file lexbuf )
# 865 "xlib/xpm.ml"

  | 1 ->
# 176 "xlib/xpm.mll"
             ( 
      !code.[String.length !code - !read] <- 
        Char.chr (hexcode lexbuf 2 * 16 + hexcode lexbuf 3);
      decr read;
      if !read > 0 then read_bits lexbuf )
# 874 "xlib/xpm.ml"

  | 2 ->
# 181 "xlib/xpm.mll"
              (  raise (BadFile ("looking for 0x",Lexing.lexeme_start lexbuf)) )
# 879 "xlib/xpm.ml"

  | 3 ->
# 182 "xlib/xpm.mll"
      ( read_bits lexbuf )
# 884 "xlib/xpm.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_read_bits_rec lexbuf __ocaml_lex_state

;;

# 184 "xlib/xpm.mll"
 
type bitmap_data = int * int * int * int * string
type pixmap_data = int * int * Xtypes.colordef array * int array array
type bitmap = Xtypes.size * Xtypes.size * coord * coord * Xtypes.pixmap
type pixmap = Xtypes.size * Xtypes.size * int * Xtypes.pixmap * Xtypes.pixmap

let readPixmapDataFromFile filename =
  let ic = open_in filename in
  try
    let lexbuf = Lexing.from_channel ic in
    let (dx,dy,ncolors,nchars) = first_line lexbuf in
    let colors = Array.create ncolors NoColor in
    let codes = Hashtbl.create ncolors in
    for i = 0 to ncolors - 1 do
      code := String.create nchars;
      read := nchars;
      colors.(i) <- color_def lexbuf;
      Hashtbl.add codes !code i;
    done;
    let table = Array.init dy (fun _ -> Array.create dx 0) in
    let code = String.create nchars in
    for y = 0 to dy - 1 do
      let line = xpm_line lexbuf in
      if String.length line <> dx * nchars then raise (BadFile ("size",Lexing.lexeme_start lexbuf));
      for x = 0 to dx - 1 do
        for c = 0 to nchars - 1 do
          code.[c] <- line.[x*nchars+c]
        done;
        table.(y).(x) <- Hashtbl.find codes code
      done
    done;
    close_in ic;
    (dx,dy,colors, table)
  with
    _ -> close_in ic; raise (BadFile ("readPixmapDataFromFile",0))

let readBitmapDataFromFile filename =
  width := 0;
  height := 0;
  hot_x := 0;
  hot_y := 0;
  let ic = open_in filename in
  try
    let lexbuf = Lexing.from_channel ic in
    let _ = xbm_file lexbuf in
    close_in ic;
    (!width,!height,!hot_x, !hot_y, !code)
  with
    e -> close_in ic; raise (BadFile ("readBitmapDataFromFile",0))
      
let drawBitmap display win gc x y  bitmap  =
  let (dx,dy,hot_x,hot_y,bitmap) = bitmap in
  let usize =  display.dpy_bitmap_format_scanline_pad in
  
  let units = ((dx + usize - 1) / usize) * usize / 8  in
  let bx = (dx + 7)/8 in
  
  let data = String.create (units * dy) in
  for y = 0 to dy - 1 do
    for x = 0 to bx - 1 do
      data.[y*units + x] <- bitmap.[y*bx + x]
    done
  done;  
  X.putImage display gc win x y dx dy 0 1 Xtypes.Bitmap
    data

let createBitmapFromData display win bitmap =
  let (dx,dy,hot_x,hot_y,data) = bitmap in
  let pixmap = X.createPixmap display win dx dy 1 in
  let gc = X.createGC display pixmap 
      [GCforeground (id_to_pixel 1); GCbackground (id_to_pixel 0)] in 
  drawBitmap display pixmap gc 0 0 bitmap;
  X.freeGC display gc;
  (dx,dy,hot_x,hot_y,pixmap)

let test f = try f () with e -> Printf.printf "-"; raise e  
  
let createPixmapFromData dpy win cmap depth pixmap = 
(* colors *)
  let (dx,dy,colors,data) = pixmap in
  let ncolors = Array.length colors in
  let mask = ref (-1) in
  let real_colors = Array.create ncolors (id_to_pixel (-1)) in
  for i = 0 to ncolors - 1 do
    try
      match colors.(i) with
        NoColor -> mask := i
      | RGB(r,g,b) -> 
          real_colors.(i) <-
          let ac = X.allocColor dpy cmap r g b in
          ac.ac_pixel
      | Color name ->
          real_colors.(i) <-
          let anc = X.allocNamedColor dpy cmap name in
          anc.anc_pixel
    with
      _ -> Printf.printf "Alloc color failed"; print_newline ()
  done;
  let mask = !mask in
  let pix = Zpixmap.create dpy dx dy depth in
  let width = (dx + 7)/8 in
  let bitmap = if mask <> -1 then String.make (width * dy) '\000'  else ""
  in
  for y = 0 to dy - 1 do
    let line = data.(y) in
    for x = 0 to dx - 1 do
      let color = real_colors.(line.(x)) in
      if pixel_to_id color <> -1 then
        begin
          setPixel pix x y real_colors.(line.(x));
          if mask <> -1 then
            bitmap.[y * width + x / 8 ] <- Char.chr
              ((Char.code bitmap.[y * width + x / 8 ])
              lor (1 lsl (x land 7)));
        end
    done
  done;
  let pixmap = X.createPixmap dpy win dx dy depth in
  let gc = X.createGC dpy pixmap  
    [GCforeground (id_to_pixel 1); GCbackground (id_to_pixel 0)] in  
  Zpixmap.putImage dpy pixmap gc 0 0 pix;
  X.freeGC dpy gc;
  let mask = 
    if mask = -1 then noWindow else
      let (_,_,_,_,pix) = createBitmapFromData dpy win (dx,dy,0,0,bitmap)
      in pix
  in
  (dx,dy,depth,pixmap,mask)
    
  
let createBitmapFromFile dpy win filename =
  createBitmapFromData dpy win (readBitmapDataFromFile filename)

let createPixmapFromFile dpy win cmap depth filename =
  createPixmapFromData dpy win cmap depth (readPixmapDataFromFile filename)

let data_to_string data =
  let s = ref "\n[|" in
  for j = 0 to Array.length data - 1 do
    let line = data.(j) in
    s := !s ^ (if j > 0 then ";[|" else " [|");
    for i = 0 to Array.length line - 1 do
      s := Printf.sprintf "%s%s%d" !s (if i>0 then ";" else "") line.(i)
    done;
    s := !s ^ "|]\n"
  done;
  s := !s ^ " |]"; !s

let colors_to_string colors =
  let s = ref "[|" in
  for i = 0 to Array.length colors - 1 do
    s := (match colors.(i) with
      RGB(r,g,b) -> Printf.sprintf "%s%sXtypes.RGB(%d,%d,%d)\n"
          !s (if i>0 then ";" else "")
          r g b
    | Color n -> Printf.sprintf "%s%sXtypes.Color(\"%s\")\n"
          !s (if i>0 then ";" else "")
          n
    | NoColor -> Printf.sprintf "%s%sXtypes.NoColor\n"
          !s (if i>0 then ";" else ""))
  done;
  s := !s ^ " |]"; !s

let createMLStringFromPixmapData pixmap pixmap_name =
  let (dx,dy,colors,data) = pixmap in
  Printf.sprintf "let %s = (%d,%d,\n(%s),\n(%s))\n" pixmap_name dx dy 
    (colors_to_string colors) (data_to_string data)

  (*

  
open Xtypes
open X
open Xlib  
open Xutils
  
let display = openDisplay ""
let screen = display.dpy_roots.(0)
let root = screen.scr_root
let white = Xutils.defaultWhite display
let black = Xutils.defaultBlack display
let cmap = Xutils.defaultColormap display
let depth = Xutils.defaultDepth display
  

let gc = X.createGC display root [GCforeground black; GCbackground white]

let test filename =
  let (dx,dy,pix,_) = createPixmapFromFile display root cmap depth
      filename in
  X.copyArea display gc pix 0 0 root 10 10 dx dy;;
open Xpm;;
let data = readPixmapDataFromFile "xterm.xpm";;   
let s = createMLStringFromPixmapData data "xterm_pix";;
let oc = open_out "/tmp/pix.ml"
let _ = output_string oc s
let _ = close_out oc;;
  #use "/tmp/pix.ml";;

  *)


# 1093 "xlib/xpm.ml"
